name: Python Wheel (Linux)

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    container: tttapa/panoc-alm-build-python-gcc:${{ matrix.python-version }}-11
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v1
    - name: Cache Virtual Environment
      id: cache-venv
      uses: actions/cache@v2
      with:
        path: "/tmp/py-venv"
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('scripts/ci/install-dependencies-wheel.sh') }}-${{ hashFiles('scripts/ci/install-casadi-wheel.sh') }}-${{ hashFiles('scripts/requirements.txt') }}-${{ hashFiles('scripts/requirements-wheel.txt') }}-${{ hashFiles('scripts/ci/install-patchelf.sh') }}-
    - name: Install Casadi and other Python Dependencies 
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        python3 -m venv /tmp/py-venv
        . /tmp/py-venv/bin/activate
        python -m pip install -r scripts/requirements.txt -r scripts/requirements-wheel.txt
        bash scripts/ci/install-dependencies-wheel.sh
        bash scripts/ci/install-patchelf.sh
      env:
        CXXFLAGS: "-march=skylake -static-libstdc++ -static-libgcc"
        LDFLAGS: "-static-libstdc++ -static-libgcc"
        CFLAGS: "-march=skylake -static-libgcc"
        FC: gfortran
    - name: Build
      run: |
        . /tmp/py-venv/bin/activate
        rm -rf _skbuild/
        python setup.py bdist_wheel --build-type RelWithDebInfo -j$(nproc) --generator Ninja --skip-generator-test
        LD_LIBRARY_PATH=$VIRTUAL_ENV/lib \
          auditwheel repair --plat manylinux_2_27_x86_64 \
          dist/panocpy-*.whl
      env:
        CXXFLAGS: "-march=skylake -static-libstdc++ -static-libgcc"
        LDFLAGS: "-static-libstdc++ -static-libgcc"
        CFLAGS: "-march=skylake -static-libgcc"
        FC: gfortran
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: panocpy-whl-${{ matrix.python-version }}
        path: wheelhouse/panocpy-*manylinux*.whl

  test:
    needs: build
    runs-on: ubuntu-latest
    container: python:${{ matrix.python-version }}-bullseye
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9']
    steps:
    - uses: actions/checkout@v1
    - uses: actions/download-artifact@v2
      with:
        name: panocpy-whl-${{ matrix.python-version }}
        path: wheelhouse
    - name: 'Install panocpy'
      run: pip install --find-links=wheelhouse panocpy
    - name: 'Run tests'
      run: python src/panocpy/test.py